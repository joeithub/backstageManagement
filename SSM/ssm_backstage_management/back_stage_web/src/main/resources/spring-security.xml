<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security.xsd">

<!--开启注解权限控制 jsr250方式-->
    <security:global-method-security jsr250-annotations="enabled" secured-annotations="enabled" pre-post-annotations="enabled"></security:global-method-security>
    <!-- 配置不过滤的资源（静态资源及登录相关） -->
    <!-- 配置不拦截的资源 -->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>



    <!--
        配置具体的规则
        auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面

        use-expressions="false"	是否使用SPEL表达式（没学习过）
        use-expressions 选择true 下面access 后面就要 跟spel表达式写成hasAnyRole('ROLE_USER','ROLE_ADMIN')
       ====================================================================
        use-expressions 选择false 则可以跟access="ROLE_USER,ROLE_ADMIN"
        但是要注入一个DefaultWebSecurityExpressionHandler
       <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />

    -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有                ROLE_USER的角色"
        -->
  <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>

        <!-- 定义跳转的具体的页面 -->
        <security:form-login
                login-page="/login.jsp"
                login-processing-url="/login.do"
                default-target-url="/index.jsp"
                authentication-failure-url="/failer.jsp"
                authentication-success-forward-url="/pages/main.jsp"
        />

        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>

        <!-- 退出 -->
  <!--
  退出功能是Spring-security自带的功能不用我们写具体功能只要按下面配置即可自动实现退出并跳转到登录页面
  -->
        <security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp" />

    </security:http>

    <!-- 切换成数据库中的用户名和密码
    切换认证管理器 用来校验数据库中的用户名和密码并规定往哪里跳
    userService这个类需要我们自己定自己编写名称也不定就叫userService
    -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置加密的方式-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


    <!--以下是配置不从数据库拿用户名和密码的方式
<security:http auto-config="true" use-expressions="false" >
		 配置资料连接，表示任意路径都需要ROLE_USER权限
    <security:intercept-url pattern="/**" access="ROLE_USER" />
  自定义登陆页面，login-page 自定义登陆页面 authentication-failure-url 用户权限校验失败之后才会跳转到这个页面，如果数据库中没有这个用户则不会跳转到这个页面。
        default-target-url 登陆成功后跳转的页面。 注：登陆页面用户名固定 username，密码 password，action:login
    <security:form-login login-page="/login.html"
                         login-processing-url="/login" username-parameter="username"
                         password-parameter="password" authentication-failure-url="/failer.html"
                         default-target-url="/success.html"
    />
  登出， invalidate-session 是否删除session logout-url：登出处理链接 logout-success-url：登出成功页面
        注：登出操作 只需要链接到 logout即可登出当前用户
    <security:logout invalidate-session="true" logout-url="/logout"
                     logout-success-url="/login.jsp" />
    关闭CSRF,默认是开启的
    <security:csrf disabled="true" />
    </security:http>

   因为用户存在数据库里所以不需要配置下面的了
   <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="{noop}user"
                               authorities="ROLE_USER" />
                <security:user name="admin" password="{noop}admin"
                               authorities="ROLE_ADMIN" />
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
  -->

</beans>